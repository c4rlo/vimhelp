# Definitions of objects stored in Datastore

from google.cloud import ndb


_ndb_client = None


def ndb_context():
    global _ndb_client
    if _ndb_client is None:
        _ndb_client = ndb.Client()
    return _ndb_client.context()


# There is one of these objects in the datastore, to persist some bits of info that we
# need across update runs; key name is "vim" or "neovim".
class GlobalInfo(ndb.Model):
    refs_etag = ndb.BlobProperty()
    # HTTP ETag of GraphQL query for latest refs/tags
    # (useless in practice since the GitHub GraphQL endpoint seems to not support ETag)

    docdir_etag = ndb.BlobProperty()
    # HTTP ETag of the vim repository request for the 'runtime/doc' subdirectory

    master_sha = ndb.TextProperty()
    # Git SHA of latest master commit

    vim_version_tag = ndb.TextProperty()
    # Git tag of current Vim version

    last_update_time = ndb.DateTimeProperty(indexed=False)
    # Time of last changes to generated files


# Tags, for use with the "go to tag" feature; key name is "vim" or "neovim".
class TagsInfo(ndb.Model):
    tags = ndb.JsonProperty(json_type=list)
    # Pairs of vimhelp tag and (site-relative) link. Looks like this:
    # [ ["t", "motion.txt.html#t"], ["perl", "if_perl.txt.html#perl"], ... ]


# Info related to an unprocessed documentation file from the repository; key name is
# e.g. "vim:help.txt" or "neovim:api.txt"
class RawFileInfo(ndb.Model):
    project = ndb.StringProperty(required=True)
    # Either "vim" or "neovim", always matches the entity key ID

    git_sha = ndb.BlobProperty()
    # 'sha' property returned by GitHub API (not populated for vim_faq.txt)

    etag = ndb.BlobProperty()
    # HTTP ETag of the file on github


# The actual contents of an unprocessed documentation file from the repository; key name
# is e.g. "vim:faq.txt" or "neovim:help.txt"
class RawFileContent(ndb.Model):
    project = ndb.StringProperty(required=True)
    # Either "vim" or "neovim", always matches the entity key ID

    data = ndb.BlobProperty(required=True)
    # The data

    encoding = ndb.BlobProperty(required=True)
    # The encoding, e.g. 'UTF-8'


# Info related to a processed (HTMLified) documentation file; key name is e.g.
# "vim:faq.txt" or "neovim:help.txt"
class ProcessedFileHead(ndb.Model):
    project = ndb.StringProperty(required=True)
    # Either "vim" or "neovim", always matches the entity key ID

    etag = ndb.BlobProperty(required=True)
    # HTTP ETag on this server, generated by us as a hash of the contents

    encoding = ndb.BlobProperty(required=True)
    # Encoding, always matches the corresponding 'RawFileContent' object

    modified = ndb.DateTimeProperty(indexed=False, auto_now=True)
    # Time when this file was generated

    numparts = ndb.IntegerProperty(indexed=False)
    # Number of parts; there will be 'numparts - 1' objects of kind 'ProcessedFilePart'
    # in the database. Processed files are split up into parts as required by datastore
    # blob limitations (currently these can only be up to 1 MiB in size)

    data0 = ndb.BlobProperty(required=True)
    # Contents of the first (and possibly only) part

    used_assets = ndb.JsonProperty(json_type=list, indexed=True)
    # Names and hashes of assets used by this HTML file. List elements match the
    # key names of "Asset" entities.


# Part of a processed file; key name is "{project}:{basename}:{partnum}", e.g.
# "neovim:help.txt:1".
# This chunking is necessary because the maximum entity size in the Datastore is 1 MB:
# see https://cloud.google.com/datastore/docs/concepts/limits
# NOTE: vimhelp.py currently relies on the keynames, when sorted lexicographically,
# yielding the correct order; this implies that we must never have a partnum with more
# than one digit.
class ProcessedFilePart(ndb.Model):
    data = ndb.BlobProperty(required=True)
    # Contents

    etag = ndb.BlobProperty(required=True)
    # Same value as corresponding 'ProcessedFileHead.etag'. Used when retrieving the
    # 'ProcessedFileHead' and all its 'ProcessedFilePart's to ensure that they were
    # retrieved consistently.


# Versioned static asset; key name is "{basename}:{hash}", e.g. "vimhelp.js:d34db33f".
class Asset(ndb.Model):
    data = ndb.BlobProperty(required=True)
    # Contents

    create_time = ndb.DateTimeProperty(required=True, indexed=False, auto_now_add=True)
    # Time this entity was created

    unused_time = ndb.DateTimeProperty(indexed=False)
    # Time as of which this entity is no longer in use
